package entities;

import org.lwjgl.input.Keyboard;
import org.lwjgl.util.vector.Vector3f;

public class Camera {
    private Vector3f position = new Vector3f(0, 0, 0);
    private float pitch = 0;
    private float yaw;
    private float roll;
    private Light light;

    public Camera(Light light) {
        this.light = light;
    }

    public void move() {
        float speed = 0.005f;
        float turnSpeed = 1f;

        if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
            yaw -= turnSpeed;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            yaw += turnSpeed;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
            pitch -= turnSpeed;
            if (pitch < -90) pitch = -90;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
            pitch += turnSpeed;
            if (pitch > 90) pitch = 90;
        }

        float yawRad = (float) Math.toRadians(yaw);
        float pitchRad = (float) Math.toRadians(pitch);

        float dx = (float) (Math.cos(pitchRad) * Math.sin(yawRad));
        float dy = (float) Math.sin(pitchRad);
        float dz = (float) (Math.cos(pitchRad) * Math.cos(yawRad));

        Vector3f forward = new Vector3f(dx, dy, dz);

        if (Keyboard.isKeyDown(Keyboard.KEY_S)) {
            position.x += forward.x * speed;
            position.y += forward.y * speed;
            position.z += forward.z * speed;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_W)) {
            position.x -= forward.x * speed;
            position.y -= forward.y * speed;
            position.z -= forward.z * speed;
        }

        Vector3f right = new Vector3f((float)Math.sin(yawRad - Math.PI/2), 0, (float)Math.cos(yawRad - Math.PI/2));

        if (Keyboard.isKeyDown(Keyboard.KEY_A)) {
            position.x += right.x * speed;
            position.z += right.z * speed;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_D)) {
            position.x -= right.x * speed;
            position.z -= right.z * speed;
        }

        if (Keyboard.isKeyDown(Keyboard.KEY_Q)) {
            position.y -= speed;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_E)) {
            position.y += speed;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_Y)) {
            pitch = 90;
            updateLightDirection();
            resetOrientation();
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_T)) {
            pitch = 0;
            updateLightDirection();
            resetOrientation();
        }

        updateLightDirection();
    }

    private void updateLightDirection() {
        float lightX = (float) Math.cos(Math.toRadians(pitch)) * (float) Math.cos(Math.toRadians(yaw));
        float lightY = (float) Math.sin(Math.toRadians(pitch));
        float lightZ = (float) Math.cos(Math.toRadians(pitch)) * (float) Math.sin(Math.toRadians(yaw));

        Vector3f lightDirection = new Vector3f(lightX, lightY, lightZ);
        light.setPosition(lightDirection);
    }
    
    private void resetOrientation() {
    	position.set(0, 0, 0);
    }

    public Vector3f getPosition() {
        return position;
    }

    public float getPitch() {
        return pitch;
    }

    public float getYaw() {
        return yaw;
    }

    public float getRoll() {
        return roll;
    }
}
